version: '3'
services:
  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.2
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      - es-net
    ports:
      - 9200:9200
    volumes:
    - es-data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g

  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:8.1.2
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    networks:
      - es-net
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601

  chargement:
    build: ./chargement
    depends_on:
      - elasticsearch
    container_name: chargement
    networks:
      - es-net
    volumes:
      - shared-data:/data
    command: ["/usr/bin/wait-for-it.sh", "es-container:9200", "--", "python", "executor.py"]

  ml-processing:
    build: ./ML
    depends_on:
      - elasticsearch
      - chargement
    container_name: ml-processing
    networks:
      - es-net
    volumes:
      - shared-data:/data
    command: ["bash", "-c", "while [ ! -f /data/chargement_done.txt ]; do echo 'Waiting for chargement to complete...'; sleep 15; done; /app/run_all.sh"]
  
  api:
    build: ./api
    depends_on:
      - elasticsearch
      - ml-processing
    container_name: api-container
    networks:
      - es-net
    volumes:
      - shared-data:/data
    ports:
      - 8000:8000
    command: ["bash", "-c", "while [ ! -f /data/tfidf_vectorizer.pkl ] || [ ! -f /data/word2vec_model.model ]; do echo 'Waiting for models to be available...'; sleep 15; done; uvicorn main:app --host 0.0.0.0 --port 8000"]
  
  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ./prometheus-grafana/prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - es-net
    restart: always

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9110:9100
    networks:
      - es-net
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./prometheus-grafana/alertmanager/:/etc/alertmanager/
    networks:
      - es-net
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - es-net
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./prometheus-grafana/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./prometheus-grafana/grafana/config.monitoring
    networks:
      - es-net
    restart: always

networks:
  es-net:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  es-data:
    driver: local
  shared-data:
    driver: local